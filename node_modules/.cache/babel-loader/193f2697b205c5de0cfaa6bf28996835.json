{"ast":null,"code":"// Source: http://jsfiddle.net/vWx8V/\n// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes\n\n/**\n * Conenience method returns corresponding value for given keyName or keyCode.\n *\n * @param {Mixed} keyCode {Number} or keyName {String}\n * @return {Mixed}\n * @api public\n */\nfunction keyCode(searchInput) {\n  // Keyboard Events\n  if (searchInput && 'object' === typeof searchInput) {\n    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode;\n    if (hasKeyCode) searchInput = hasKeyCode;\n  } // Numbers\n\n\n  if ('number' === typeof searchInput) return names[searchInput]; // Everything else (cast to string)\n\n  var search = String(searchInput); // check codes\n\n  var foundNamedKey = codes[search.toLowerCase()];\n  if (foundNamedKey) return foundNamedKey; // check aliases\n\n  var foundNamedKey = aliases[search.toLowerCase()];\n  if (foundNamedKey) return foundNamedKey; // weird character?\n\n  if (search.length === 1) return search.charCodeAt(0);\n  return undefined;\n}\n/**\n * Compares a keyboard event with a given keyCode or keyName.\n *\n * @param {Event} event Keyboard event that should be tested\n * @param {Mixed} keyCode {Number} or keyName {String}\n * @return {Boolean}\n * @api public\n */\n\n\nkeyCode.isEventKey = function isEventKey(event, nameOrCode) {\n  if (event && 'object' === typeof event) {\n    var keyCode = event.which || event.keyCode || event.charCode;\n\n    if (keyCode === null || keyCode === undefined) {\n      return false;\n    }\n\n    if (typeof nameOrCode === 'string') {\n      // check codes\n      var foundNamedKey = codes[nameOrCode.toLowerCase()];\n\n      if (foundNamedKey) {\n        return foundNamedKey === keyCode;\n      } // check aliases\n\n\n      var foundNamedKey = aliases[nameOrCode.toLowerCase()];\n\n      if (foundNamedKey) {\n        return foundNamedKey === keyCode;\n      }\n    } else if (typeof nameOrCode === 'number') {\n      return nameOrCode === keyCode;\n    }\n\n    return false;\n  }\n};\n\nexports = module.exports = keyCode;\n/**\n * Get by name\n *\n *   exports.code['enter'] // => 13\n */\n\nvar codes = exports.code = exports.codes = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'ctrl': 17,\n  'alt': 18,\n  'pause/break': 19,\n  'caps lock': 20,\n  'esc': 27,\n  'space': 32,\n  'page up': 33,\n  'page down': 34,\n  'end': 35,\n  'home': 36,\n  'left': 37,\n  'up': 38,\n  'right': 39,\n  'down': 40,\n  'insert': 45,\n  'delete': 46,\n  'command': 91,\n  'left command': 91,\n  'right command': 93,\n  'numpad *': 106,\n  'numpad +': 107,\n  'numpad -': 109,\n  'numpad .': 110,\n  'numpad /': 111,\n  'num lock': 144,\n  'scroll lock': 145,\n  'my computer': 182,\n  'my calculator': 183,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222\n}; // Helper aliases\n\nvar aliases = exports.aliases = {\n  'windows': 91,\n  '⇧': 16,\n  '⌥': 18,\n  '⌃': 17,\n  '⌘': 91,\n  'ctl': 17,\n  'control': 17,\n  'option': 18,\n  'pause': 19,\n  'break': 19,\n  'caps': 20,\n  'return': 13,\n  'escape': 27,\n  'spc': 32,\n  'spacebar': 32,\n  'pgup': 33,\n  'pgdn': 34,\n  'ins': 45,\n  'del': 46,\n  'cmd': 91\n};\n/*!\n * Programatically add the following\n */\n// lower case chars\n\nfor (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32; // numbers\n\n\nfor (var i = 48; i < 58; i++) codes[i - 48] = i; // function keys\n\n\nfor (i = 1; i < 13; i++) codes['f' + i] = i + 111; // numpad keys\n\n\nfor (i = 0; i < 10; i++) codes['numpad ' + i] = i + 96;\n/**\n * Get by code\n *\n *   exports.name[13] // => 'Enter'\n */\n\n\nvar names = exports.names = exports.title = {}; // title for backward compat\n// Create reverse mapping\n\nfor (i in codes) names[codes[i]] = i; // Add aliases\n\n\nfor (var alias in aliases) {\n  codes[alias] = aliases[alias];\n}","map":{"version":3,"names":["keyCode","searchInput","hasKeyCode","which","charCode","names","search","String","foundNamedKey","codes","toLowerCase","aliases","length","charCodeAt","undefined","isEventKey","event","nameOrCode","exports","module","code","i","fromCharCode","title","alias"],"sources":["C:/Users/vijayadurga.bandaru/Desktop/react-venia-4/node_modules/keycode/index.js"],"sourcesContent":["// Source: http://jsfiddle.net/vWx8V/\n// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes\n\n/**\n * Conenience method returns corresponding value for given keyName or keyCode.\n *\n * @param {Mixed} keyCode {Number} or keyName {String}\n * @return {Mixed}\n * @api public\n */\n\nfunction keyCode(searchInput) {\n  // Keyboard Events\n  if (searchInput && 'object' === typeof searchInput) {\n    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode\n    if (hasKeyCode) searchInput = hasKeyCode\n  }\n\n  // Numbers\n  if ('number' === typeof searchInput) return names[searchInput]\n\n  // Everything else (cast to string)\n  var search = String(searchInput)\n\n  // check codes\n  var foundNamedKey = codes[search.toLowerCase()]\n  if (foundNamedKey) return foundNamedKey\n\n  // check aliases\n  var foundNamedKey = aliases[search.toLowerCase()]\n  if (foundNamedKey) return foundNamedKey\n\n  // weird character?\n  if (search.length === 1) return search.charCodeAt(0)\n\n  return undefined\n}\n\n/**\n * Compares a keyboard event with a given keyCode or keyName.\n *\n * @param {Event} event Keyboard event that should be tested\n * @param {Mixed} keyCode {Number} or keyName {String}\n * @return {Boolean}\n * @api public\n */\nkeyCode.isEventKey = function isEventKey(event, nameOrCode) {\n  if (event && 'object' === typeof event) {\n    var keyCode = event.which || event.keyCode || event.charCode\n    if (keyCode === null || keyCode === undefined) { return false; }\n    if (typeof nameOrCode === 'string') {\n      // check codes\n      var foundNamedKey = codes[nameOrCode.toLowerCase()]\n      if (foundNamedKey) { return foundNamedKey === keyCode; }\n    \n      // check aliases\n      var foundNamedKey = aliases[nameOrCode.toLowerCase()]\n      if (foundNamedKey) { return foundNamedKey === keyCode; }\n    } else if (typeof nameOrCode === 'number') {\n      return nameOrCode === keyCode;\n    }\n    return false;\n  }\n}\n\nexports = module.exports = keyCode;\n\n/**\n * Get by name\n *\n *   exports.code['enter'] // => 13\n */\n\nvar codes = exports.code = exports.codes = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'ctrl': 17,\n  'alt': 18,\n  'pause/break': 19,\n  'caps lock': 20,\n  'esc': 27,\n  'space': 32,\n  'page up': 33,\n  'page down': 34,\n  'end': 35,\n  'home': 36,\n  'left': 37,\n  'up': 38,\n  'right': 39,\n  'down': 40,\n  'insert': 45,\n  'delete': 46,\n  'command': 91,\n  'left command': 91,\n  'right command': 93,\n  'numpad *': 106,\n  'numpad +': 107,\n  'numpad -': 109,\n  'numpad .': 110,\n  'numpad /': 111,\n  'num lock': 144,\n  'scroll lock': 145,\n  'my computer': 182,\n  'my calculator': 183,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222\n}\n\n// Helper aliases\n\nvar aliases = exports.aliases = {\n  'windows': 91,\n  '⇧': 16,\n  '⌥': 18,\n  '⌃': 17,\n  '⌘': 91,\n  'ctl': 17,\n  'control': 17,\n  'option': 18,\n  'pause': 19,\n  'break': 19,\n  'caps': 20,\n  'return': 13,\n  'escape': 27,\n  'spc': 32,\n  'spacebar': 32,\n  'pgup': 33,\n  'pgdn': 34,\n  'ins': 45,\n  'del': 46,\n  'cmd': 91\n}\n\n/*!\n * Programatically add the following\n */\n\n// lower case chars\nfor (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32\n\n// numbers\nfor (var i = 48; i < 58; i++) codes[i - 48] = i\n\n// function keys\nfor (i = 1; i < 13; i++) codes['f'+i] = i + 111\n\n// numpad keys\nfor (i = 0; i < 10; i++) codes['numpad '+i] = i + 96\n\n/**\n * Get by code\n *\n *   exports.name[13] // => 'Enter'\n */\n\nvar names = exports.names = exports.title = {} // title for backward compat\n\n// Create reverse mapping\nfor (i in codes) names[codes[i]] = i\n\n// Add aliases\nfor (var alias in aliases) {\n  codes[alias] = aliases[alias]\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}